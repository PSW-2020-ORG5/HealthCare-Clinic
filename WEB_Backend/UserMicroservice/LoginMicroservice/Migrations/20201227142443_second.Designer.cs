// <auto-generated />
using System;
using LoginMicroservice.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LoginMicroservice.Migrations
{
    [DbContext(typeof(UserDbContext))]
    [Migration("20201227142443_second")]
    partial class second
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Model.BusinessHours.BusinessHoursModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FromHour")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ToHour")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("BusinessHoursModel");
                });

            modelBuilder.Entity("Model.Users.RegisteredUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Adress")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Biography")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Gender")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Jmbg")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ParentsName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Password")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Username")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("RegisteredUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("RegisteredUser");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Birthday = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "marko1@gmail.com",
                            Name = "Marko",
                            Password = "marko1",
                            Role = 1,
                            Surname = "Markovic",
                            Username = "marko1"
                        },
                        new
                        {
                            Id = 2,
                            Birthday = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "marko1@gmail.com",
                            Name = "Marko",
                            Password = "marko1",
                            Role = 0,
                            Surname = "Markovic",
                            Username = "marko1"
                        });
                });

            modelBuilder.Entity("Model.Users.Doctor", b =>
                {
                    b.HasBaseType("Model.Users.RegisteredUser");

                    b.Property<bool>("AbleToPrescribeTreatments")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AbleToValidateMedicines")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("BusinessHoursId")
                        .HasColumnType("int");

                    b.Property<int>("SpecialtyType")
                        .HasColumnType("int");

                    b.HasIndex("BusinessHoursId");

                    b.HasDiscriminator().HasValue("Doctor");

                    b.HasData(
                        new
                        {
                            Id = 4,
                            Birthday = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "nnikolic@gmail.com",
                            Name = "Nikola",
                            Password = "nikola02",
                            Role = 0,
                            Surname = "Nikolic",
                            Username = "nikola01",
                            AbleToPrescribeTreatments = false,
                            AbleToValidateMedicines = false,
                            SpecialtyType = 0
                        });
                });

            modelBuilder.Entity("Model.Users.PatientModel", b =>
                {
                    b.HasBaseType("Model.Users.RegisteredUser");

                    b.Property<int>("MedicalRecordId")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("PatientModel");
                });

            modelBuilder.Entity("Model.Users.Doctor", b =>
                {
                    b.HasOne("Model.BusinessHours.BusinessHoursModel", "BusinessHours")
                        .WithMany()
                        .HasForeignKey("BusinessHoursId");
                });
#pragma warning restore 612, 618
        }
    }
}
